## Array
	- Ein Array ist eine Liste von Werten/Objekten mit einer festgelegten Anzahl
	- Alle Werte und Objekte liegen im Spiecher beieinander-> kann schnell durchlaufen werden

### Codebeispiel

````java
//erstellen eines Arrays
int[] primzahlen = new int[3];

//Speichern von Werten in einem Array
primzahlen[0] = 2;
primzahlen[1] = 3;
primzahlen[2] = 5;

//Werte ändern/löschen des 3.Wertes
primzahlen[2] = 0;

//ausgabe
for(int i = 0; i < primzahlen.lenght; i++){
System.out.println(„Wert „ + i + „: „ + primzahlen[i])
}
````

### Pseudocode Beispiel ForEach Schleife
````java
for(int i: primzahlen){
    if(i==5) System.out.println("5 ist eine Primzahl)
}
````

Pseudocode:
FÜR alle i in Primzahlen
  WENN i=5
    AUSGABE "5 ist in Primzahl enthalten"
  ENDE WENN
ENDE FÜR

## ArrayList
- eine ArrayList ist eine dynamische Loste von Werten und oder Pbjekten
- Intern wird die ArrayList mit einem Array abgeildet, welches immer genug freie Plätze vorhält. d.h.:
- Es wird intern eine neue Array-Struktur aufgebaut, wenn die bestehende Liste bis zu einem bestimmte. Schwellenwert gefüllt ist.
  -> Eine ArrayList ist ähnlich schnell im Zugriff wie ein Array.
- eine ArrayList ist keine Queue und kein Stack.

 ### Codebeispiel
````java
//Arraylist erstellen
ArrayList<Integer>() primzahlen = new ArrayList<>();

//Objekte hinzufügen
primzahlen.add(2);
primzahlen.add(3);
primzahlen.add(5);

//Liste ausgeben
System.out.println(primzahlen);

//Objekt entfernen
primzahlen.remove(1); //remove Objekt an index 1

//über Liste itarieren (schrittweise abarbeiten)
for(int i : primzahlen){
	System.put.println(i);
}

//prüfen, ob ein Wert in der Liste ist
System.out.println(primzahlen.contains(5));
````

## LinkedList
Die LinkedList ist eine doppelt vekettete Liste. D.h. jedes Element kennt seinen Vorgänger und Nachfolger. 
Über den Namen der LinkedList greift man mit einem Zeiger auf das Erste Element der Liste zu. 
Das letzte Element der Liste enthält den Wert "null".

### Vorteile
- es können beliebig viele Elemnete hinzugefügt werden und wieder entfernt werden
- eine LinkedList kann auch als Stapel verwendet werden (Sie ist es nicht)

### Nachteile
- langsame Iterarion (z.B. beim Sortieren)

### Codebeispiel
````java
//LinkedList erzeugen
LinkedList<String>() sprachen = new LinkedList<>();

//Werte hinzufügen
sprachen.add("Englisch");
sprachen.add("Deutsch");
sprachen.add("Klingonisch");

//Ausgabe
System.out.println(sprachen);

//entfernen von Objekten
sprachen.remove(2);

//über Liste interieren
for(Object o : sprachen){
	System.out.println(o);
}

//Liste als Queue (Stack, Stapel)
sprachen.removeFirst();
sprachen.removeLast();
sprachen.addFirst("Spanisch");
sprachen.addLast("Chinesisch");

//Ausgabe
System.out.println(sprachen);

//was man noch so machen kann
String str = sprachen.pop(); //neustes Element entfernen und verwenden
String str2 = sprachen.pollLast(); //letztes Element entfernen und verwenden
sprachen.push(str); //Element hinzufügen (am Anfang)
````
